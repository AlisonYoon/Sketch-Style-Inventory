// Shows a dialog with all actions available from Color Inventory (control alt cmd i)

@import '../inventory.js'
@import '../sandbox.js'
@import '../persistence.js'


// remember current artboard
if (doc.currentPage().children() > 0) {
    var selectedArtboard = doc.currentPage().currentArtboard();

    // get right most artboard if no artboard is selected
    if (selectedArtboard == null) selectedArtboard = com.getflourish.layers.getRightmostArtboard();

    var x = selectedArtboard.frame().x();
}

var states = persist.get('com.getflourish.inventory.configuration');

var configuration = showConfigurationDialog(states);

if (configuration[0] == 1000) {
    states = configuration[1];

    persist.set('com.getflourish.inventory.configuration', states)

    var colors = states[0];
    var textStyles = states[1];
    var symbols = states[2];
    var exportMetadata = states[3];

    if (colors == 1) com.getflourish.colorInventory.generate();
    if (textStyles == 1) com.getflourish.textStyleInventory.generate()
    if (symbols == 1) com.getflourish.symbolInventory.generate();
    if (exportMetadata == 1) handleExport();
}

function handleExport () {

    // file name of the exported file
    var filename = "typography.css"

    // let the user choose the export location
    var fileURL = com.getflourish.common.fileSaver();
    path = fileURL.path();

    // export path + "/" + filename


    // get authorization to write to the export folder
    new AppSandbox().authorize(path, function () {

    });

}

function showConfigurationDialog (states) {
    var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 200.0, 90.0))

    var buttonStates = states ||Â [1, 1, 1, 0];

    if (persist.get('com.getflourish.inventory.configuration') != null) {
        buttonStates = persist.get('com.getflourish.inventory.configuration');
    }

    var buttonOne = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 70.0, 200.0, 20.0))
    buttonOne.setButtonType(NSSwitchButton)
    buttonOne.setTitle("Colors")
    buttonOne.setState(buttonStates[0])
    buttonOne.setCOSJSTargetFunction(function(sender){
      buttonStates[0] = buttonStates[0] == 0 ? 1 : 0
    })
    accessoryView.addSubview(buttonOne)

    var buttonTwo = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 50.0, 200.0, 20.0))
    buttonTwo.setButtonType(NSSwitchButton)
    buttonTwo.setTitle("Text Styles")
    buttonTwo.setState(buttonStates[1])
    buttonTwo.setCOSJSTargetFunction(function(sender){
      buttonStates[1] = buttonStates[1] == 0 ? 1 : 0
    })
    accessoryView.addSubview(buttonTwo)

    var buttonThree = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 30.0, 200.0, 20.0))
    buttonThree.setButtonType(NSSwitchButton)
    buttonThree.setTitle("Symbols")
    buttonThree.setState(buttonStates[2])
    buttonThree.setCOSJSTargetFunction(function(sender){
      buttonStates[2] = buttonStates[2] == 0 ? 1 : 0
    })
    accessoryView.addSubview(buttonThree)

    var buttonFour = NSButton.alloc().initWithFrame(NSMakeRect(0.0, 0.0, 200.0, 20.0))
    buttonFour.setButtonType(NSSwitchButton)
    buttonFour.setTitle("Export Metadata")
    buttonFour.setState(buttonStates[3])
    buttonFour.setCOSJSTargetFunction(function(sender){
      buttonStates[3] = buttonStates[3] == 0 ? 1 : 0
    })
    accessoryView.addSubview(buttonFour)

    var alert = NSAlert.alloc().init()
    alert.messageText = "Style Inventory Configuration"
    alert.addButtonWithTitle("Run")
    alert.addButtonWithTitle("Cancel")
    alert.setAccessoryView(accessoryView)

    var responseCode = alert.runModal()

    return [responseCode, buttonStates]
  }